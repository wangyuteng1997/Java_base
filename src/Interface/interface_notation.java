package Interface;

/**
 * @author wang yuteng
 * @data 2020/7/17 14:53
 */
/*接口就是多个类的公共规范
* 接口是一种引用的数据类型，最重要的内容就是其中的抽象方法
*
* 如何定义一个接口的名称：
* public interface 接口名称{
*           接口内容
*     }
*
* 如果是java7，包括1.常量 2.抽象方法
* 如果是java8，包括 3.默认方法 4.静态方法
* 如果是java9 还可以额外包含有 5.私有方法
*
* 接口使用步骤
* 1.接口不能直接使用，必须要有一个实现类来实现改接口
* 格式：
* public class 实现名称 implements 接口名称{}
* 2.接口的实现类必须覆盖重写接口中的所有的抽象方法
*--------------------------------------------------------------------------------------------------
*-----------------------------------------------------
* 接口中最重要的就是
* 抽象方法 格式：
* 【public】【abstract】 返回值类型 方法名称（参数列表）
*注意实现类必须覆盖重写接口所有的抽象方法，除非实现类是抽象类
* 有抽象方法的类一定是抽象类。但是抽象类中不一定都是抽象方法，说明这个interface也是属于抽象类
* ++++抽象方法需要子类继承实现（覆盖），所以通过实现类可以实现该方法
**-----------------------------------------------------
* 默认方法 格式：
* 【public】 default 返回值类型 方法名称（方法体）
*  如果接口中新增了抽象类的方法，那么继承的所有子类都需要重新覆盖重写，所以有了默认方法，会让实现类自动继承该方法
* ++++也是通过实现类可以实现该方法，但是实现类中可以不覆盖，也可以覆盖重写
* -----------------------------------------------------
* 静态方法  格式：
* 【public】 static 返回值类型 方法名称（方法体）
*  ++++应该通过接口名称调用，不能通过实现类对下个调用接口静态方法
*-----------------------------------------------------
* 私有方法  格式：
** 1.普通私有化方法：解决多个默认方法之间的重复代码的问题
 * private 返回值类型 方法名称（参数列表）{方法体}
 *
 * 2.静态私有化方法解决多个静态方法之间的重复代码的问题
 *private static 返回值类型 方法名称（参数列表）{方法体}
 * ++++private的方法只有接口自己才能够调用，不能够被实现类或者别人使用
*-----------------------------------------------------
*-----------------------------------------------------------------------------------------------
* 注意事项：
* 如果实现类并没有覆盖重写接口中的抽象方法，那么这个实现类自己就必须是抽象类
*  */
public class interface_notation {
    public static void main(String[] args) {
//        不能直接new接口对象使用
//        创建实现类的对象使用
        interface_my_abstractImpl imp = new interface_my_abstractImpl();
        imp.methodAbs();
        imp.methodAbs4();
    }
}
